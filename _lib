#compdef lib

# We don't want to show the descriptions.
zstyle ':completion:*:*:lib:*:*' verbose no


# Get the path to the library.
local libpath=$(lib where)
local archivepath=$(lib where -a)
local shelvespath=$(lib where -s)


# Completion for top-level commands.
_lib_cmds() {
  local subcmds=('open:open' 'add:add' 'grep:grep' 'search:search' \
                 'link:link' 'ln:ln' 'index:index' 'compile:compile' \
                 'where:where' 'bookmark:bookmark' 'bm:bm' 'cd:cd' \
                 'rekey':'rekey')
  _describe 'command' subcmds
}


_lib_where() {
  _arguments '-a' '--archive' \
             '-b' '--bookmarks' \
             '-s' '--shelves'
}


_lib_cd() {
  _path_files -W libpath -/
}


# Simply complete a key in the archive or shelves.
_lib_key() {
  local keys=($(lib complete keys))
  _values 'key' $keys
  # _arguments '1: :_path_files -W paths -/'
}


# Completion for the open subcommand.
_lib_open() {
  # Here we use both a custom list of completion strings and the files in the
  # shelves directory.
  local paths=($shelvespath)
  local opts=($(lib complete keys-and-links))
  _alternative 'args: :((-b\:"open bibtex"))' \
               'files: :_path_files -W paths -/' \
               "links: :_values key $opts"
}


# Completion for the add subcommand.
_lib_add() {
  # The -s allows stacking of single-letter arguments.
  _arguments -s '-d' '--delete' \
                '-b' '--bookmark' \
                '1: :_files -g "*.pdf"' \
                '2: :_files -g "*.bib"'
}


_lib_link() {
  local paths=($archivepath $shelvespath)
  _arguments '-f:link:_files' '--fix:link:_files' \
             '1: :_path_files -W paths -/'
}


# We require an initial command, potentially followed by some arguments.
_arguments -C '1: :_lib_cmds' '*::args:->args'


# Do completion for individual commands.
case $state in
  (args)
    case $line[1] in
      (link|ln)     _lib_link ;;
      (bookmark|bm) _lib_key ;;
      (cd)          _lib_cd ;;
      (open)        _lib_open ;;
      (add)         _lib_add  ;;
      (rekey)       _lib_key ;;
      (where)       _lib_where ;;
    esac
    ;;
esac
